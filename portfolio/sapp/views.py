from django.shortcuts import render
from rest_framework import generics, permissions
from .models import QRCode
from .serializers import QRCodeSerializer, UserSerializer
from django.contrib.auth.models import User
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
import qrcode
from io import BytesIO
from django.core.files import File
from PIL import Image

# Function-based views for rendering templates
def index(request):
    return render(request, 'sapp/base.html')

def home(request):
    return render(request, 'sapp/home.html')

def about(request):
    return render(request, 'sapp/about.html')

def signup(request):
    return render(request, 'sapp/signup.html')

def login(request):
    return render(request, 'sapp/login.html')

def account(request):
    return render(request, 'sapp/account.html')

def api(request):
    return render(request, 'sapp/api.html')

# Class-based view for generating QR codes
class GenerateQRView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        if 'data' in request.data:
            data = request.data['data']
            if isinstance(data, str):
                # Handle link data
                qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=10,
                    border=4,
                )
                qr.add_data(data)
                qr.make(fit=True)
                img = qr.make_image(fill='black', back_color='white').convert('RGB')
                buffer = BytesIO()
                img.save(buffer, format="JPEG")
                file_name = f'qr_{request.user.username}.jpeg'
                qr_code = QRCode(user=request.user, data=data)
                qr_code.image.save(file_name, File(buffer), save=True)
                qr_code.save()
                return Response(QRCodeSerializer(qr_code).data)
            elif isinstance(data, Image.Image):
                # Handle image data
                buffer = BytesIO()
                data.convert('RGB').save(buffer, format="JPEG")
                file_name = f'qr_{request.user.username}.jpeg'
                qr_code = QRCode(user=request.user, data='image')
                qr_code.image.save(file_name, File(buffer), save=True)
                qr_code.save()
                return Response(QRCodeSerializer(qr_code).data)
        return Response({'error': 'Invalid data'}, status=400)

# Class-based view for listing QR codes generated by the user
class UserQRCodeListView(generics.ListAPIView):
    serializer_class = QRCodeSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return QRCode.objects.filter(user=self.request.user)

# Class-based view for user registration
class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer

# Class-based view for user login
class LoginView(APIView):
    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')
        user = User.objects.filter(username=username).first()
        if user and user.check_password(password):
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        return Response({'error': 'Invalid Credentials'}, status=400)

# Class-based view for user account details
class AccountView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        user = request.user
        return Response({
            'username': user.username,
            'email': user.email,
        })